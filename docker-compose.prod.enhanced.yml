version: '3.8'

services:
  db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Add initialization scripts if needed
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - pulse360_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - pulse360_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - FLUX_AI_API_KEY=${FLUX_AI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
      - FIRST_ADMIN_EMAIL=${FIRST_ADMIN_EMAIL}
      - FIRST_ADMIN_PASSWORD=${FIRST_ADMIN_PASSWORD}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      # Add additional security environment variables
      - SECURE_COOKIES=true
      - ENABLE_HTTPS_REDIRECT=true
    volumes:
      - uploads:/app/uploads
    networks:
      - pulse360_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - FLUX_AI_API_KEY=${FLUX_AI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - WORKER_TYPE=celery
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
    volumes:
      - uploads:/app/uploads
    networks:
      - pulse360_network
    depends_on:
      - redis
      - db
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - FLUX_AI_API_KEY=${FLUX_AI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - WORKER_TYPE=beat
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
    volumes:
      - uploads:/app/uploads
    networks:
      - pulse360_network
    depends_on:
      - redis
      - db
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${API_URL}
    restart: always
    networks:
      - pulse360_network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/security:/etc/nginx/security:ro
      - uploads:/var/www/uploads:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - pulse360_network
    depends_on:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Optional backup service
  backup:
    image: postgres:15
    restart: always
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: ["sh", "/backup.sh"]
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_RETENTION_DAYS=7
    networks:
      - pulse360_network
    depends_on:
      - db

volumes:
  postgres_data:
  redis_data:
  uploads:

networks:
  pulse360_network:
    driver: bridge